{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","App","x","state","list","request","require","authOptions","url","headers","Buffer","client_id","toString","form","grant_type","json","self","this","post","error","response","body","statusCode","options","access_token","get","setState","tracks","items","getPlaylist","then","className","map","song","i","src","track","album","images","style","height","name","loggedIn","onClick","getTenPlaylist","getToken","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0LAIMA,EAAa,I,OAAIC,GAEjBC,E,kDAEJ,aAAc,IAAD,8BACX,gBAFFC,EAAI,GAOF,EAAKC,MAAQ,CAEXC,KAAM,IARG,E,uDAYX,IAAIC,EAAUC,EAAQ,KAMlBC,EAAc,CAChBC,IAAK,yCACLC,QAAS,CACP,cAAiB,SAAY,IAAIC,EAAOC,qEAAiCC,SAAS,WAEpFC,KAAM,CACJC,WAAY,sBAEdC,MAAM,GAGJC,EAAOC,KACXZ,EAAQa,KAAKX,GAAa,SAASY,EAAOC,EAAUC,GAClD,IAAKF,GAAiC,MAAxBC,EAASE,WAAoB,CAGzC,IACIC,EAAU,CACZf,IAAK,8DACLC,QAAS,CACP,cAAiB,UAJTY,EAAKG,cAMfT,MAAM,GAERV,EAAQoB,IAAIF,GAAS,SAASJ,EAAOC,EAAUC,GAC7CL,EAAKU,SAAS,CACZtB,KAAMiB,EAAKM,OAAOC,iB,uCAMX,IAAD,OACd7B,EAAW8B,YAAY,0BAA0BC,MAAK,SAACV,GAErD,EAAKM,SAAS,CACZtB,KAAMgB,EAASO,OAAOC,a,+BAIlB,IAAD,OACP,OACE,yBAAKG,UAAW,YAId,8BAGA,6BAEId,KAAKd,MAAMC,KAAK4B,KAAI,SAACC,EAAMC,GACzB,OAAO,2BAAG,yBAAKC,IAAKF,EAAKG,MAAMC,MAAMC,OAAO,GAAG9B,IAAK+B,MAAO,CAAEC,OAAQ,EAAKtC,KAAnE,IAA2EgC,EAAE,EAA7E,KAAkFD,EAAKG,MAAMK,UAIxGxB,KAAKd,MAAMuC,UAAY,4BAAQC,QAAS,kBAAM,EAAKC,mBAA5B,MAIzB,4BAASD,QAAS1B,KAAK4B,SAASC,KAAK7B,OAArC,wB,GAhFU8B,aAwFH9C,Q,2gBClFK+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACtD,EAAA,EAAD,OAEFuD,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.c6c18a4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass App extends Component {\n  x = 50\n  constructor(){\n    super();\n\n    // if (token) {\n    //   spotifyApi.setAccessToken(clientToken);\n    // }\n    this.state = {\n      // loggedIn: token ? true : false,\n      list: [],\n    }\n  }\n  getToken() { \n    var request = require('request'); // \"Request\" library\n\n    var client_id = '075f2d8dc6744629b213c8db5f197f11'; // Your client id\n    var client_secret = '28379d8195194e7ab1fe758936700605'; // Your secret\n\n    // your application requests authorization\n    var authOptions = {\n      url: 'https://accounts.spotify.com/api/token',\n      headers: {\n        'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n      },\n      form: {\n        grant_type: 'client_credentials'\n      },\n      json: true\n    };\n\n    var self = this\n    request.post(authOptions, function(error, response, body) {\n      if (!error && response.statusCode === 200) {\n\n        // use the access token to access the Spotify Web API\n        var token = body.access_token;\n        var options = {\n          url: 'https://api.spotify.com/v1/playlists/1VAF2XuY780GAeCgIsFtJz',\n          headers: {\n            'Authorization': 'Bearer ' + token\n          },\n          json: true\n        };\n        request.get(options, function(error, response, body) {\n          self.setState({\n            list: body.tracks.items\n          })\n        });\n      }\n    });\n  }\n  getTenPlaylist(){\n    spotifyApi.getPlaylist(\"1VAF2XuY780GAeCgIsFtJz\").then((response) => {\n      \n      this.setState({\n        list: response.tracks.items\n      })\n    })\n  }\n  render() {\n    return (\n      <div className= \"center-v\">\n        {/* <div className=\"App\">\n          <a href = \"http://localhost:8888\"><button > Login to Spotify</button></a>\n        </div> */}\n        <div>\n\n        </div>\n        <div>\n          {\n            this.state.list.map((song, i) => {\n              return <p><img src={song.track.album.images[0].url} style={{ height: this.x }}/> {i+1}: {song.track.name}</p>\n            })\n          }\n        </div>\n        { this.state.loggedIn && <button onClick={() => this.getTenPlaylist()}>\n            10\n          </button>\n        }\n        <button  onClick={this.getToken.bind(this)}>\n          Display the 10!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}