{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","options","bottom","right","left","time","mixColor","backgroundColor","buttonColorDark","buttonColorLight","saveInCookies","label","String","fromCodePoint","autoMatchOsTheme","Darkmode","showWidget","App","x","state","list","request","require","authOptions","url","headers","Buffer","client_id","toString","form","grant_type","json","self","this","post","error","response","body","statusCode","access_token","get","setState","tracks","items","getPlaylist","then","getToken","className","href","map","song","i","console","log","track","album","images","src","style","height","external_urls","spotify","target","name","loggedIn","onClick","getTenPlaylist","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2MAIMA,EAAa,I,OAAIC,GAEjBC,EAAU,CACdC,OAAQ,OACRC,MAAO,OACPC,KAAM,QACNC,KAAM,OACNC,SAAU,OACVC,gBAAiB,UACjBC,gBAAiB,UACjBC,iBAAkB,OAClBC,eAAe,EACfC,MAAOC,OAAOC,cAAc,QAC5BC,kBAAkB,GAGH,IAAIC,IAASd,GAErBe,a,IAEHC,E,kDAEJ,aAAc,IAAD,8BACX,gBAFFC,EAAI,GAOF,EAAKC,MAAQ,CAEXC,KAAM,IARG,E,uDAaX,IAAIC,EAAUC,EAAQ,KAMlBC,EAAc,CAChBC,IAAK,yCACLC,QAAS,CACP,cAAiB,SAAY,IAAIC,EAAOC,qEAAiCC,SAAS,WAEpFC,KAAM,CACJC,WAAY,sBAEdC,MAAM,GAGJC,EAAOC,KACXZ,EAAQa,KAAKX,GAAa,SAASY,EAAOC,EAAUC,GAClD,IAAKF,GAAiC,MAAxBC,EAASE,WAAoB,CAGzC,IACIrC,EAAU,CACZuB,IAAK,8DACLC,QAAS,CACP,cAAiB,UAJTY,EAAKE,cAMfR,MAAM,GAERV,EAAQmB,IAAIvC,GAAS,SAASkC,EAAOC,EAAUC,GAC7CL,EAAKS,SAAS,CACZrB,KAAMiB,EAAKK,OAAOC,iB,uCAMX,IAAD,OACd5C,EAAW6C,YAAY,0BAA0BC,MAAK,SAACT,GAErD,EAAKK,SAAS,CACZrB,KAAMgB,EAASM,OAAOC,a,0CAK1BV,KAAKa,a,+BAEG,IAAD,OACP,OACE,yBAAKC,UAAW,YACd,6BACI,4BACI,4BACI,uBAAGC,KAAK,uBAAR,SAEJ,4BACI,uBAAGA,KAAK,WAAR,WAEJ,4BACI,uBAAGA,KAAK,+EAAR,YAEJ,4BACI,uBAAGA,KAAK,wCAAR,aAEJ,4BACI,uBAAGA,KAAK,sCAAR,gBAEJ,4BACI,uBAAGA,KAAK,cAAR,aAEJ,4BACI,uBAAGA,KAAK,QAAR,UAEJ,4BACI,uBAAGA,KAAK,WAAR,aAIV,yBAAKD,UAAU,UACb,6BAEId,KAAKd,MAAMC,KAAK6B,KAAI,SAACC,EAAMC,GAGzB,OAFAC,QAAQC,IAAIF,EAAI,OAASD,EAAKI,MAAMC,MAAMC,OAAO,IAEf,MAA9BN,EAAKI,MAAMC,MAAMC,OAAO,GACnB,2BACP,yBAAKC,IAAKP,EAAKI,MAAMC,MAAMC,OAAO,GAAGhC,IAAKkC,MAAO,CAAEC,OAAQ,EAAKzC,KAC/DiC,EAAE,EAFI,KAEA,uBAAGH,KAAME,EAAKI,MAAMM,cAAcC,QAASC,OAAO,SAASf,UAAU,QAAQG,EAAKI,MAAMS,MAFxF,KAIF,2BACJZ,EAAE,EADE,KACE,uBAAGH,KAAME,EAAKI,MAAMM,cAAcC,QAASC,OAAO,SAASf,UAAU,QAAQG,EAAKI,MAAMS,MAD1F,SAKX9B,KAAKd,MAAM6C,UAAY,4BAAQC,QAAS,kBAAM,EAAKC,mBAA5B,MAIzB,4BAASD,QAAShC,KAAKa,SAASqB,KAAKlC,OAArC,gB,GAnHMmC,aA4HHnD,Q,0gBCxIKoD,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC3D,EAAA,EAAD,OAEF4D,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLiB,QAAQjB,MAAMA,EAAMkD,c","file":"static/js/main.e225e338.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Darkmode from 'darkmode-js';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nconst options = {\n  bottom: '32px', // default: '32px'\n  right: '32px', // default: '32px'\n  left: 'unset', // default: 'unset'\n  time: '0.2s', // default: '0.3s'\n  mixColor: '#fff', // default: '#fff'\n  backgroundColor: '#d8d3ca',  // default: '#fff'\n  buttonColorDark: '#272c35',  // default: '#100f2c'\n  buttonColorLight: '#fff', // default: '#fff'\n  saveInCookies: true, // default: true,\n  label: String.fromCodePoint(0x1F313), // default: ''\n  autoMatchOsTheme: true // default: true\n}\n\nconst darkmode = new Darkmode(options);\n\ndarkmode.showWidget();\n\nclass App extends Component {\n  x = 50\n  constructor(){\n    super();\n\n    // if (token) {\n    //   spotifyApi.setAccessToken(clientToken);\n    // }\n    this.state = {\n      // loggedIn: token ? true : false,\n      list: [],\n    }\n  }\n  \n  getToken() { \n    var request = require('request'); // \"Request\" library\n\n    var client_id = '075f2d8dc6744629b213c8db5f197f11'; // Your client id\n    var client_secret = '28379d8195194e7ab1fe758936700605'; // Your secret\n\n    // your application requests authorization\n    var authOptions = {\n      url: 'https://accounts.spotify.com/api/token',\n      headers: {\n        'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n      },\n      form: {\n        grant_type: 'client_credentials'\n      },\n      json: true\n    };\n\n    var self = this\n    request.post(authOptions, function(error, response, body) {\n      if (!error && response.statusCode === 200) {\n\n        // use the access token to access the Spotify Web API\n        var token = body.access_token;\n        var options = {\n          url: 'https://api.spotify.com/v1/playlists/1VAF2XuY780GAeCgIsFtJz',\n          headers: {\n            'Authorization': 'Bearer ' + token\n          },\n          json: true\n        };\n        request.get(options, function(error, response, body) {\n          self.setState({\n            list: body.tracks.items\n          })\n        });\n      }\n    });\n  }\n  getTenPlaylist(){\n    spotifyApi.getPlaylist(\"1VAF2XuY780GAeCgIsFtJz\").then((response) => {\n      \n      this.setState({\n        list: response.tracks.items\n      })\n    })\n  }\n  componentDidMount() {\n    this.getToken()\n  }\n  render() {\n    return (\n      <div className= \"center-v\">\n        <nav>\n            <ul>\n                <li>\n                    <a href=\"https://jaykudva.me\">home</a>\n                </li>\n                <li>\n                    <a href=\"/resume\">resume</a>\n                </li>\n                <li>\n                    <a href=\"https://www.youtube.com/channel/UCuKdN2q-1Cv1kJRlAPT9tIg?sub_confirmation=1\">youtube</a>\n                </li>\n                <li>\n                    <a href=\"https://www.linkedin.com/in/jaykudva\">linkedin</a>\n                </li>\n                <li>\n                    <a href=\"https://www.unsplash.com/@jaykudva\">photography</a>\n                </li>\n                <li>\n                    <a href=\"/list.html\">previous</a>\n                </li>\n                <li>\n                    <a href=\"/ten\">top10</a>\n                </li>\n                <li>\n                    <a href=\"/quotes\">quotes</a>\n                </li>\n            </ul>\n        </nav>\n          <div className=\"bounds\">\n            <div>\n              {\n                this.state.list.map((song, i) => {\n                  console.log(i + \" is \" + song.track.album.images[0])\n                  // print()\n                  if (song.track.album.images[0] != null) {\n                    return <p>\n                    <img src={song.track.album.images[0].url} style={{ height: this.x }}/> \n                    {i+1}: <a href={song.track.external_urls.spotify} target=\"_blank\" className=\"ooga\">{song.track.name}</a> </p>\n                  } else {\n                  return <p>\n                    {i+1}: <a href={song.track.external_urls.spotify} target=\"_blank\" className=\"ooga\">{song.track.name}</a> </p>\n                }})\n              }\n            </div>\n            { this.state.loggedIn && <button onClick={() => this.getTenPlaylist()}>\n                10\n              </button>\n            }\n            <button  onClick={this.getToken.bind(this)}>\n              Update\n            </button>\n          </div>\n      </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}